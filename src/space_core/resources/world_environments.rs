
use bevy::prelude::Color;
use bevy::math::Quat;
use serde::{Serialize, Deserialize};

use crate::space_core::functions::converters::string_to_type_converters::{string_color_to_color, string_quat_to_quat};

// The resource we send to each client on connection to initialize worldEnvironment.
#[derive(Serialize, Deserialize, Debug, Clone, Copy)]
pub struct WorldEnvironment {
    adjustment_brightness: f32,
    adjustment_contrast: f32,
    adjustment_enabled: bool,
    adjustment_saturation : f32,
    ambient_light_color : Color,
    ambient_light_energy : f32,
    ambient_light_sky_contribution : f32,
    tonemap_auto_exposure : bool,
    tonemap_auto_exposure_max : f32,
    tonemap_auto_exposure_min : f32,
    tonemap_auto_exposure_grey : f32,
    tonemap_auto_exposure_speed : f32,
    camera_feed_id : i64,
    canvas_max_layer : i64,
    bg_color : Color,
    bg_energy : f32,
    background_mode : u8,
    sky_custom_fov : f32,
    sky_orientation : Quat,
    dof_blur_far_amount : f32,
    dof_blur_far_distance : f32,
    dof_blur_far_enabled : bool,
    dof_blur_far_quality : u8,
    dof_blur_far_transition: f32,
    dof_blur_near_amount: f32,
    dof_blur_near_distance: f32,
    dof_blur_near_enabled : bool,
    dof_blur_near_quality : f32,
    dof_blur_near_transition : f32,
    fog_color : Color,
    fog_depth_begin : f32,
    fog_depth_curve : f32,
    fog_depth_enabled : bool,
    fog_depth_end : f32,
    fog_enabled : bool,
    fog_height_curve : f32,
    fog_height_enabled : bool,
    fog_height_max : f32,
    fog_height_min : f32,
    fog_sun_amount : f32,
    fog_sun_color : Color,
    fog_transmit_curve : f32,
    fog_transmit_enabled : bool,
    glow_bicubic_upscale_enabled : bool,
    glow_blend_mode : u8,
    glow_bloom : f32,
    glow_enabled : bool,
    glow_hdr_luminance_cap : f32,
    glow_hdr_bleed_scale : f32,
    glow_hdr_bleed_treshold  : f32,
    glow_intensity : f32,
    glow_strength : f32,
    ssr_depth_tolerance : f32,
    ssr_enabled : bool,
    ssr_fade_in : f32,
    ssr_fade_out : f32,
    ssr_max_steps : i64,
    ssr_rough : bool,
    ssao_ao_channel_affect : f32,
    ssao_bias : f32,
    ssao_blur : u8,
    ssao_color : Color,
    ssao_edge_sharpness : f32,
    ssao_enabled : bool,
    ssao_intensity : f32,
    ssao_intensity2 : f32,
    ssao_direct_light_affect : f32,
    ssao_quality : u8,
    ssao_radius : f32,
    ssao_radius2 : f32,
    tone_map_exposure : f32,
    tone_mapper : u8,
    tone_map_white : f32
}

impl WorldEnvironment {

    pub fn new(raw : WorldEnvironmentRaw) -> WorldEnvironment {


        WorldEnvironment {
            adjustment_brightness: raw.adjustment_brightness,
            adjustment_contrast: raw.adjustment_contrast,
            adjustment_enabled: raw.adjustment_enabled,
            adjustment_saturation : raw.adjustment_saturation,
            ambient_light_color : string_color_to_color(&raw.ambient_light_color),
            ambient_light_energy : raw.ambient_light_energy,
            ambient_light_sky_contribution : raw.ambient_light_sky_contribution,
            tonemap_auto_exposure : raw.tonemap_auto_exposure,
            tonemap_auto_exposure_max : raw.tonemap_auto_exposure_max,
            tonemap_auto_exposure_min : raw.tonemap_auto_exposure_min,
            tonemap_auto_exposure_grey : raw.tonemap_auto_exposure_grey,
            tonemap_auto_exposure_speed : raw.tonemap_auto_exposure_speed,
            camera_feed_id : raw.camera_feed_id,
            canvas_max_layer : raw.canvas_max_layer,
            bg_color : string_color_to_color(&raw.bg_color),
            bg_energy : raw.bg_energy,
            background_mode : raw.background_mode,
            sky_custom_fov : raw.sky_custom_fov,
            sky_orientation : string_quat_to_quat(&raw.sky_orientation),
            dof_blur_far_amount : raw.dof_blur_far_amount,
            dof_blur_far_distance : raw.dof_blur_far_distance,
            dof_blur_far_enabled : raw.dof_blur_far_enabled,
            dof_blur_far_quality : raw.dof_blur_far_quality,
            dof_blur_far_transition: raw.dof_blur_far_transition,
            dof_blur_near_amount: raw.dof_blur_near_amount,
            dof_blur_near_distance: raw.dof_blur_near_distance,
            dof_blur_near_enabled : raw.dof_blur_near_enabled,
            dof_blur_near_quality : raw.dof_blur_near_quality,
            dof_blur_near_transition : raw.dof_blur_near_transition,
            fog_color : string_color_to_color(&raw.fog_color),
            fog_depth_begin : raw.fog_depth_begin,
            fog_depth_curve : raw.fog_depth_curve,
            fog_depth_enabled : raw.fog_depth_enabled,
            fog_depth_end : raw.fog_depth_end,
            fog_enabled : raw.fog_enabled,
            fog_height_curve : raw.fog_height_curve,
            fog_height_enabled : raw.fog_height_enabled,
            fog_height_max : raw.fog_height_max,
            fog_height_min : raw.fog_height_min,
            fog_sun_amount : raw.fog_sun_amount,
            fog_sun_color : string_color_to_color(&raw.fog_sun_color),
            fog_transmit_curve : raw.fog_transmit_curve,
            fog_transmit_enabled : raw.fog_transmit_enabled,
            glow_bicubic_upscale_enabled : raw.glow_bicubic_upscale_enabled,
            glow_blend_mode : raw.glow_blend_mode,
            glow_bloom : raw.glow_bloom,
            glow_enabled : raw.glow_enabled,
            glow_hdr_luminance_cap : raw.glow_hdr_luminance_cap,
            glow_hdr_bleed_scale : raw.glow_hdr_bleed_scale,
            glow_hdr_bleed_treshold  : raw.glow_hdr_bleed_treshold,
            glow_intensity : raw.glow_intensity,
            glow_strength : raw.glow_strength,
            ssr_depth_tolerance : raw.ssr_depth_tolerance,
            ssr_enabled : raw.ssr_enabled,
            ssr_fade_in : raw.ssr_fade_in,
            ssr_fade_out : raw.ssr_fade_out,
            ssr_max_steps : raw.ssr_max_steps,
            ssr_rough : raw.ssr_rough,
            ssao_ao_channel_affect : raw.ssao_ao_channel_affect,
            ssao_bias : raw.ssao_bias,
            ssao_blur : raw.ssao_blur,
            ssao_color : string_color_to_color(&raw.ssao_color),
            ssao_edge_sharpness : raw.ssao_edge_sharpness,
            ssao_enabled : raw.ssao_enabled,
            ssao_intensity : raw.ssao_intensity,
            ssao_intensity2 : raw.ssao_intensity2,
            ssao_direct_light_affect : raw.ssao_direct_light_affect,
            ssao_quality : raw.ssao_quality,
            ssao_radius : raw.ssao_radius,
            ssao_radius2 : raw.ssao_radius2,
            tone_map_exposure : raw.tone_map_exposure,
            tone_mapper : raw.tone_mapper,
            tone_map_white : raw.tone_map_white
        }


    }

}



// Each struct value how it gets interpreted by verde-json and how it gets exported via the official JSON.print method on the godot server.
#[derive(Deserialize)]
pub struct WorldEnvironmentRaw {
    adjustment_brightness: f32,
    adjustment_contrast: f32,
    adjustment_enabled: bool,
    adjustment_saturation : f32,
    ambient_light_color : String,
    ambient_light_energy : f32,
    ambient_light_sky_contribution : f32,
    tonemap_auto_exposure : bool,
    tonemap_auto_exposure_max : f32,
    tonemap_auto_exposure_min : f32,
    tonemap_auto_exposure_grey : f32,
    tonemap_auto_exposure_speed : f32,
    camera_feed_id : i64,
    canvas_max_layer : i64,
    bg_color : String,
    bg_energy : f32,
    background_mode : u8,
    sky_custom_fov : f32,
    sky_orientation : String,
    dof_blur_far_amount : f32,
    dof_blur_far_distance : f32,
    dof_blur_far_enabled : bool,
    dof_blur_far_quality : u8,
    dof_blur_far_transition: f32,
    dof_blur_near_amount: f32,
    dof_blur_near_distance: f32,
    dof_blur_near_enabled : bool,
    dof_blur_near_quality : f32,
    dof_blur_near_transition : f32,
    fog_color : String,
    fog_depth_begin : f32,
    fog_depth_curve : f32,
    fog_depth_enabled : bool,
    fog_depth_end : f32,
    fog_enabled : bool,
    fog_height_curve : f32,
    fog_height_enabled : bool,
    fog_height_max : f32,
    fog_height_min : f32,
    fog_sun_amount : f32,
    fog_sun_color : String,
    fog_transmit_curve : f32,
    fog_transmit_enabled : bool,
    glow_bicubic_upscale_enabled : bool,
    glow_blend_mode : u8,
    glow_bloom : f32,
    glow_enabled : bool,
    glow_hdr_luminance_cap : f32,
    glow_hdr_bleed_scale : f32,
    glow_hdr_bleed_treshold  : f32,
    glow_intensity : f32,
    glow_strength : f32,
    ssr_depth_tolerance : f32,
    ssr_enabled : bool,
    ssr_fade_in : f32,
    ssr_fade_out : f32,
    ssr_max_steps : i64,
    ssr_rough : bool,
    ssao_ao_channel_affect : f32,
    ssao_bias : f32,
    ssao_blur : u8,
    ssao_color : String,
    ssao_edge_sharpness : f32,
    ssao_enabled : bool,
    ssao_intensity : f32,
    ssao_intensity2 : f32,
    ssao_direct_light_affect : f32,
    ssao_quality : u8,
    ssao_radius : f32,
    ssao_radius2 : f32,
    tone_map_exposure : f32,
    tone_mapper : u8,
    tone_map_white : f32
}


