use api::data::Vec3Int;
use bevy::{math::Vec3, prelude::Entity};

/// An attack event.
#[derive(Clone)]
pub struct Attack {
    /// Attacker entity id.
    pub attacker: Entity,
    /// Used weapon option.
    pub weapon_option: Option<Entity>,
    /// Targetted entity.
    pub targetted_entity: Option<Entity>,
    /// Targetted cell.
    pub targetted_cell: Option<Vec3Int>,
    /// Attack id.
    pub incremented_id: u64,
    /// Attack angle.
    pub angle: f32,
    /// Targetted limb.
    pub targetted_limb: String,
    /// Whether alt attack mode is enabled, so that you can melee with a projectile weapon in a different attack mode.
    pub alt_attack_mode: bool,
}

/// Hit results generated by physics queries.
#[derive(Clone)]
pub struct QueryCombatHitResult {
    /// Attack id.
    pub incremented_id: u64,
    pub entities_hits: Vec<EntityHit>,
    pub cell_hits: Vec<CellHit>,
}

/// Entity hit.
#[derive(Clone)]
pub struct EntityHit {
    pub entity: Entity,
    pub hit_point: Vec3,
}
/// Cell hit.
#[derive(Clone)]
pub struct CellHit {
    pub cell: Vec3Int,
    pub hit_point: Vec3,
}
